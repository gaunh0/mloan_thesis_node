const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// H√†m ƒë·ªÉ ƒë·ªçc c·∫•u tr√∫c th∆∞ m·ª•c
function readDirectoryStructure(dirPath, maxDepth = 3, currentDepth = 0) {
  try {
    // Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(dirPath)) {
      return {
        name: path.basename(dirPath),
        type: 'error',
        path: dirPath,
        error: 'ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i'
      };
    }

    // Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n c√≥ ph·∫£i l√† th∆∞ m·ª•c kh√¥ng
    const stats = fs.statSync(dirPath);
    if (!stats.isDirectory()) {
      return {
        name: path.basename(dirPath),
        type: 'file',
        path: dirPath,
        size: stats.size
      };
    }

    // ƒê·ªçc n·ªôi dung th∆∞ m·ª•c
    const structure = {
      name: path.basename(dirPath) || path.normalize(dirPath),
      type: 'directory',
      path: dirPath,
      children: []
    };

    // N·∫øu ƒë√£ ƒë·∫°t ƒë·∫øn ƒë·ªô s√¢u t·ªëi ƒëa, kh√¥ng ƒë·ªçc ti·∫øp
    if (currentDepth >= maxDepth) {
      return structure;
    }

    // L·∫•y danh s√°ch c√°c m·ª•c trong th∆∞ m·ª•c
    const items = fs.readdirSync(dirPath);

    // Duy·ªát qua t·ª´ng m·ª•c
    for (const item of items) {
      const itemPath = path.join(dirPath, item);
      
      try {
        const itemStats = fs.statSync(itemPath);
        
        if (itemStats.isDirectory()) {
          // N·∫øu l√† th∆∞ m·ª•c, ƒë·ªá quy ƒë·ªÉ ƒë·ªçc c·∫•u tr√∫c b√™n trong
          const subDir = readDirectoryStructure(itemPath, maxDepth, currentDepth + 1);
          structure.children.push(subDir);
        } else {
          // N·∫øu l√† file, th√™m v√†o danh s√°ch
          structure.children.push({
            name: item,
            type: 'file',
            path: itemPath,
            size: itemStats.size
          });
        }
      } catch (err) {
        // X·ª≠ l√Ω l·ªói khi kh√¥ng th·ªÉ ƒë·ªçc m·ªôt m·ª•c c·ª• th·ªÉ
        structure.children.push({
          name: item,
          type: 'error',
          path: itemPath,
          error: err.message
        });
      }
    }

    // S·∫Øp x·∫øp: th∆∞ m·ª•c tr∆∞·ªõc, file sau, v√† theo th·ª© t·ª± b·∫£ng ch·ªØ c√°i
    structure.children.sort((a, b) => {
      if (a.type === 'directory' && b.type !== 'directory') return -1;
      if (a.type !== 'directory' && b.type === 'directory') return 1;
      return a.name.localeCompare(b.name);
    });

    return structure;
  } catch (err) {
    return {
      name: path.basename(dirPath) || path.normalize(dirPath),
      type: 'error',
      path: dirPath,
      error: err.message
    };
  }
}

// H√†m hi·ªÉn th·ªã c·∫•u tr√∫c th∆∞ m·ª•c d∆∞·ªõi d·∫°ng c√¢y
function displayDirectoryTree(structure, prefix = '') {
  if (!structure) return;

  const isLast = true;
  const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
  const childPrefix = isLast ? '    ' : '‚îÇ   ';
  
  // Hi·ªÉn th·ªã m·ª•c hi·ªán t·∫°i
  if (structure.type === 'directory') {
    console.log(`${prefix}${connector}üìÅ ${structure.name}`);
  } else if (structure.type === 'file') {
    console.log(`${prefix}${connector}üìÑ ${structure.name}`);
  } else {
    console.log(`${prefix}${connector}‚ùå ${structure.name} (${structure.error})`);
  }

  // Hi·ªÉn th·ªã c√°c m·ª•c con
  if (structure.children && structure.children.length > 0) {
    for (let i = 0; i < structure.children.length; i++) {
      const child = structure.children[i];
      const isLastChild = i === structure.children.length - 1;
      const childConnector = isLastChild ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
      const nextChildPrefix = isLastChild ? '    ' : '‚îÇ   ';
      
      if (child.type === 'directory') {
        console.log(`${prefix}${childPrefix}${childConnector}üìÅ ${child.name}`);
        
        // Hi·ªÉn th·ªã c√°c m·ª•c con c·ªßa th∆∞ m·ª•c con
        if (child.children && child.children.length > 0) {
          for (let j = 0; j < child.children.length; j++) {
            const grandchild = child.children[j];
            const isLastGrandchild = j === child.children.length - 1;
            const grandchildConnector = isLastGrandchild ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
            
            if (grandchild.type === 'directory') {
              console.log(`${prefix}${childPrefix}${nextChildPrefix}${grandchildConnector}üìÅ ${grandchild.name}`);
            } else if (grandchild.type === 'file') {
              console.log(`${prefix}${childPrefix}${nextChildPrefix}${grandchildConnector}üìÑ ${grandchild.name}`);
            } else {
              console.log(`${prefix}${childPrefix}${nextChildPrefix}${grandchildConnector}‚ùå ${grandchild.name} (${grandchild.error})`);
            }
          }
        }
      } else if (child.type === 'file') {
        console.log(`${prefix}${childPrefix}${childConnector}üìÑ ${child.name}`);
      } else {
        console.log(`${prefix}${childPrefix}${childConnector}‚ùå ${child.name} (${child.error})`);
      }
    }
  }
}

// H√†m ch√≠nh ƒë·ªÉ th·ª±c thi ch∆∞∆°ng tr√¨nh
function main() {
  rl.question('Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c c·∫ßn duy·ªát: ', (dirPath) => {
    rl.question('Nh·∫≠p ƒë·ªô s√¢u t·ªëi ƒëa (m·∫∑c ƒë·ªãnh l√† 3): ', (depthStr) => {
      const maxDepth = parseInt(depthStr, 10) || 3;
      
      console.log(`\nƒêang ƒë·ªçc c·∫•u tr√∫c th∆∞ m·ª•c: ${dirPath} v·ªõi ƒë·ªô s√¢u ${maxDepth}...\n`);
      
      const structure = readDirectoryStructure(dirPath, maxDepth);
      console.log('C·∫•u tr√∫c th∆∞ m·ª•c:');
      displayDirectoryTree(structure);
      
      rl.close();
    });
  });
}

// Kh·ªüi ch·∫°y ch∆∞∆°ng tr√¨nh
main();