[
    {
        "id": "30a0866f4520c757",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c7e6244c9da7995a",
        "type": "mqtt out",
        "z": "30a0866f4520c757",
        "name": "Send GET NOW",
        "topic": "lora_sensor/get_now",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 760,
        "y": 220,
        "wires": []
    },
    {
        "id": "98d2ab9969fcdb74",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "Handle Polling Node 1",
        "func": "// Save the polling setting to flow variable\nflow.set('polling_node_1', msg.payload);\n\n// Send MQTT message with polling setting\nmsg.payload = {nodeId: 'node1', polling: msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 440,
        "wires": [
            [
                "591daa4e0783325d"
            ]
        ]
    },
    {
        "id": "c27b64cefcf0b381",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "Handle Polling Node 2",
        "func": "// Save the polling setting to flow variable\nflow.set('polling_node_2', msg.payload);\n\n// Send MQTT message with polling setting\nmsg.payload = {nodeId: 'node2', polling: msg.payload};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 520,
        "wires": [
            [
                "591daa4e0783325d"
            ]
        ]
    },
    {
        "id": "11961ab0c8ebdcae",
        "type": "mqtt in",
        "z": "30a0866f4520c757",
        "name": "Gateway Status",
        "topic": "lora_sensor/main_status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 800,
        "y": 360,
        "wires": [
            [
                "a9e3ca9470cea322"
            ]
        ]
    },
    {
        "id": "a9e3ca9470cea322",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "Set Status",
        "func": "// Format the message for the status display\nmsg = { payload: msg.payload, main_status: msg.payload };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 360,
        "wires": [
            [
                "8686d74fe9755030"
            ]
        ]
    },
    {
        "id": "0792f1037b11adeb",
        "type": "inject",
        "z": "30a0866f4520c757",
        "name": "Polling Node 1 Timer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "poll_node_1",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "12e5f0279c066156"
            ]
        ]
    },
    {
        "id": "12e5f0279c066156",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "Check Node1 Polling",
        "func": "let pollingValue = flow.get('polling_node_1');\n\n// Only proceed if polling is configured\nif (pollingValue && pollingValue !== 'OFF') {\n    // Convert to number of seconds\n    let interval = parseInt(pollingValue);\n    \n    // Get current time\n    let currentTime = new Date().getTime();\n    \n    // Get last poll time\n    let lastPollTime = flow.get('last_poll_node_1') || 0;\n    \n    // Check if it's time to poll\n    if (currentTime - lastPollTime >= interval * 1000) {\n        // Update last poll time\n        flow.set('last_poll_node_1', currentTime);\n        \n        // Send message to request data\n        msg.payload = {command: 'GET_DATA', nodeId: 'NODE001'};\n        msg.topic = 'lora_sensor/get_now';\n        return msg;\n    }\n}\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "bc3ac6f835637fbc",
        "type": "inject",
        "z": "30a0866f4520c757",
        "name": "Polling Node 2 Timer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "poll_node_2",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 340,
        "wires": [
            [
                "ec6edea2df87bc2c"
            ]
        ]
    },
    {
        "id": "ec6edea2df87bc2c",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "Check Node2 Polling",
        "func": "let pollingValue = flow.get('polling_node_2');\n\n// Only proceed if polling is configured\nif (pollingValue && pollingValue !== 'OFF') {\n    // Convert to number of seconds\n    let interval = parseInt(pollingValue);\n    \n    // Get current time\n    let currentTime = new Date().getTime();\n    \n    // Get last poll time\n    let lastPollTime = flow.get('last_poll_node_2') || 0;\n    \n    // Check if it's time to poll\n    if (currentTime - lastPollTime >= interval * 1000) {\n        // Update last poll time\n        flow.set('last_poll_node_2', currentTime);\n        \n        // Send message to request data\n        msg.payload = {command: 'GET_DATA', nodeId: 'NODE002'};\n        msg.topic = 'lora_sensor/get_now';\n        return msg;\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "591daa4e0783325d",
        "type": "mqtt out",
        "z": "30a0866f4520c757",
        "name": "Send Polling Node 1",
        "topic": "lora_sensor/set_polling",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 860,
        "y": 460,
        "wires": []
    },
    {
        "id": "908e7a32f507f9e3",
        "type": "influxdb in",
        "z": "30a0866f4520c757",
        "influxdb": "influxdb_config",
        "name": "Get History",
        "query": "SELECT * FROM history",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 710,
        "y": 740,
        "wires": [
            [
                "403ecf1e4c14da31",
                "214e14f817f775f3"
            ]
        ]
    },
    {
        "id": "4d9ffeefb5d2bb92",
        "type": "ui_button",
        "z": "30a0866f4520c757",
        "name": "GET NOW Button",
        "group": "2e7e904a8083e0ad",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "GET NOW",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"type\":\"GET_NOW\"}",
        "payloadType": "str",
        "topic": "lora_sensor/get_now",
        "topicType": "str",
        "x": 290,
        "y": 220,
        "wires": [
            [
                "c7e6244c9da7995a"
            ]
        ]
    },
    {
        "id": "061ca0e9cd80384c",
        "type": "ui_dropdown",
        "z": "30a0866f4520c757",
        "name": "Polling Node 1",
        "label": "Polling node 1:",
        "tooltip": "",
        "place": "",
        "group": "2e7e904a8083e0ad",
        "order": 6,
        "width": 10,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            },
            {
                "label": "5",
                "value": "5",
                "type": "str"
            },
            {
                "label": "10",
                "value": "10",
                "type": "str"
            },
            {
                "label": "30",
                "value": "30",
                "type": "str"
            },
            {
                "label": "60",
                "value": "60",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "lora_sensor/set_polling_1",
        "topicType": "str",
        "className": "",
        "x": 200,
        "y": 440,
        "wires": [
            [
                "98d2ab9969fcdb74"
            ]
        ]
    },
    {
        "id": "6d94b623b8bff5a5",
        "type": "ui_dropdown",
        "z": "30a0866f4520c757",
        "name": "Polling Node 2",
        "label": "Polling node 2:",
        "tooltip": "",
        "place": "",
        "group": "2e7e904a8083e0ad",
        "order": 7,
        "width": 10,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "OFF",
                "value": "OFF",
                "type": "str"
            },
            {
                "label": "5",
                "value": "5",
                "type": "str"
            },
            {
                "label": "10",
                "value": "10",
                "type": "str"
            },
            {
                "label": "30",
                "value": "30",
                "type": "str"
            },
            {
                "label": "60",
                "value": "60",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "lora_sensor/set_polling_2",
        "topicType": "str",
        "className": "",
        "x": 200,
        "y": 520,
        "wires": [
            [
                "c27b64cefcf0b381"
            ]
        ]
    },
    {
        "id": "8860a7595b552689",
        "type": "ui_dropdown",
        "z": "30a0866f4520c757",
        "name": "Node Selector",
        "label": "Select node:",
        "tooltip": "",
        "place": "",
        "group": "2e7e904a8083e0ad",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ALL",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Node 1",
                "value": "node1",
                "type": "str"
            },
            {
                "label": "Node 2",
                "value": "node2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "c569a55cc910db35"
            ]
        ]
    },
    {
        "id": "bea86514edcb2ded",
        "type": "ui_date_picker",
        "z": "30a0866f4520c757",
        "name": "Date Picker",
        "label": "Date:",
        "group": "2e7e904a8083e0ad",
        "order": 11,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 390,
        "y": 900,
        "wires": [
            [
                "95110ddfffa2cdab"
            ]
        ]
    },
    {
        "id": "8686d74fe9755030",
        "type": "ui_text",
        "z": "30a0866f4520c757",
        "group": "2e7e904a8083e0ad",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "Main Status",
        "label": "Main:",
        "format": "<span style=\"{{msg.main_status === 'ONLINE' ? 'color:green;font-weight:bold;' : 'color:red;font-weight:bold;'}}\">{{msg.main_status}}</span>",
        "layout": "row-spread",
        "className": "my-status",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "20",
        "color": "#000000",
        "x": 1330,
        "y": 360,
        "wires": []
    },
    {
        "id": "403ecf1e4c14da31",
        "type": "ui_table",
        "z": "30a0866f4520c757",
        "group": "2e7e904a8083e0ad",
        "name": "History Table",
        "order": 14,
        "width": 20,
        "height": 12,
        "columns": [
            {
                "field": "node",
                "title": "Node",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "temperature",
                "title": "Temperature",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "humidity",
                "title": "Humidity",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "battery",
                "title": "Battery",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time",
                "title": "Update time",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1290,
        "y": 740,
        "wires": []
    },
    {
        "id": "7f0531a96dd89f42",
        "type": "ui_template",
        "z": "30a0866f4520c757",
        "group": "2e7e904a8083e0ad",
        "name": "Node 1 Box",
        "order": 4,
        "width": 10,
        "height": 3,
        "format": "<style>\n  .node-box {\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 10px;\n  }\n\n  .node-title {\n    font-size: 26px;\n    font-weight: bold;\n    margin: 0;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .node-data {\n    margin: 5px 0;\n  }\n\n  .status-online {\n    color: green;\n    font-weight: bold;\n  }\n\n  .status-offline {\n    color: red;\n    font-weight: bold;\n  }\n</style>\n\n<div class=\"node-box\">\n  <p class=\"node-title\">\n    <span>Node 1:</span>\n  </p>\n  <p class=\"node-data\">Temperature: {{msg.payload.temperature | number:2}} °C</p>\n  <p class=\"node-data\">Humidity: {{msg.payload.humidity | number:2}} %</p>\n  <p class=\"node-data\">Battey: {{msg.payload.batteryVoltage | number:2}} V</p>\n  <p class=\"node-data\">Updated: {{msg.payload.updatedAt }} </p>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1090,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "7ef9f0788320fc15",
        "type": "ui_template",
        "z": "30a0866f4520c757",
        "group": "2e7e904a8083e0ad",
        "name": "Node 2 Box",
        "order": 5,
        "width": 10,
        "height": 3,
        "format": "<style>\n  .node-box {\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 10px;\n  }\n\n  .node-title {\n    font-size: 16px;\n    font-weight: bold;\n    margin: 0;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .node-data {\n    margin: 5px 0;\n  }\n\n  .status-online {\n    color: green;\n    font-weight: bold;\n  }\n\n  .status-offline {\n    color: red;\n    font-weight: bold;\n  }\n</style>\n\n<div class=\"node-box\">\n  <p class=\"node-title\">\n    <span>Node 2:</span>\n  </p>\n  <p class=\"node-data\">Temperature: {{msg.payload.temperature | number:2}} °C</p>\n  <p class=\"node-data\">Humidity: {{msg.payload.humidity | number:2}} %</p>\n  <p class=\"node-data\">Battery: {{msg.payload.batteryVoltage | number:2}} V</p>\n  <p class=\"node-data\">Updated: {{msg.payload.updatedAt }}</p>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1090,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d75268e2a32bf2c6",
        "type": "inject",
        "z": "30a0866f4520c757",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 740,
        "wires": [
            [
                "908e7a32f507f9e3"
            ]
        ]
    },
    {
        "id": "214e14f817f775f3",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "function 1",
        "func": "flow.set(\"temp\",msg.payload)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "95110ddfffa2cdab",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "function 2",
        "func": "// Lấy mảng dữ liệu từ flow context\nconst data = flow.get(\"temp\");\nconst targetDate = new Date(msg.payload); // Chuyển timestamp thành đối tượng Date\n\n// Kiểm tra nếu dữ liệu không tồn tại\nif (!data || !Array.isArray(data)) {\n    node.warn(\"Không tìm thấy dữ liệu hoặc dữ liệu không phải mảng\");\n    msg.payload = [];\n    return msg;\n}\n\n// Lọc dữ liệu theo ngày\nmsg.payload = data.filter(item => {\n    // Chuyển đổi chuỗi ISO date thành đối tượng Date\n    const itemDate = new Date(item.time);\n    \n    // So sánh ngày (không bao gồm giờ)\n    return itemDate.getFullYear() === targetDate.getFullYear() && \n           itemDate.getMonth() === targetDate.getMonth() && \n           itemDate.getDate() === targetDate.getDate();\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 900,
        "wires": [
            [
                "403ecf1e4c14da31"
            ]
        ]
    },
    {
        "id": "c569a55cc910db35",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "function 3",
        "func": "// Lấy mảng dữ liệu từ flow context\nconst data = flow.get(\"temp\");\nconst nodeFilter = msg.payload;\n\n// Kiểm tra nếu dữ liệu không tồn tại\nif (!data || !Array.isArray(data)) {\n    node.warn(\"Không tìm thấy dữ liệu hoặc dữ liệu không phải mảng\");\n    msg.payload = [];\n    return msg;\n}\n\n// Lọc dữ liệu dựa trên giá trị node\nif (!nodeFilter || nodeFilter === \"all\") {\n    // Trả về tất cả dữ liệu nếu là \"all\"\n    msg.payload = data;\n} else {\n    // Lọc dữ liệu theo node được chỉ định\n    msg.payload = data.filter(item => item.node === nodeFilter);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "403ecf1e4c14da31"
            ]
        ]
    },
    {
        "id": "7f6bfb550ee5cfef",
        "type": "ui_button",
        "z": "30a0866f4520c757",
        "name": "",
        "group": "2e7e904a8083e0ad",
        "order": 13,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 400,
        "y": 820,
        "wires": [
            [
                "908e7a32f507f9e3"
            ]
        ]
    },
    {
        "id": "d3395c0a569b6b67",
        "type": "ui_text",
        "z": "30a0866f4520c757",
        "group": "2e7e904a8083e0ad",
        "order": 8,
        "width": 6,
        "height": 1,
        "name": "History",
        "label": "History",
        "format": "",
        "layout": "row-spread",
        "className": "my-status",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "20",
        "color": "#000000",
        "x": 1380,
        "y": 460,
        "wires": []
    },
    {
        "id": "301afbc8c0c823c2",
        "type": "ui_template",
        "z": "30a0866f4520c757",
        "group": "2e7e904a8083e0ad",
        "name": "my-status",
        "order": 14,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .my-status {\n        color: red;\n        font-size: 20px;\n        font-weight: bold;\n        background-color: #eee;\n        padding: 6px;\n        border-radius: 4px;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "my-status",
        "x": 1640,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "3e8f890cbdb11afa",
        "type": "mqtt in",
        "z": "30a0866f4520c757",
        "name": "MQTT Data Input Node1",
        "topic": "lora_sensor/data",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 60,
        "wires": [
            [
                "cf3c60db837e836d",
                "a3754564e7c963cd"
            ]
        ]
    },
    {
        "id": "cf3c60db837e836d",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "Parse Data",
        "func": "let data = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload;\n\nif (!data || !data.nodeId) {\n    return null;\n}\n\n// Làm tròn số\ndata.temperature = parseFloat(data.temperature.toFixed(2));\ndata.humidity = parseFloat(data.humidity.toFixed(2));\ndata.batteryVoltage = parseFloat(data.batteryVoltage.toFixed(2));\n\n// Format thời gian\nlet d = new Date();\ndata.updatedAt = d.toLocaleString();\n\nlet nodeId = data.nodeId.toLowerCase();\n\nswitch (nodeId) {\n    case \"node1\":\n        return [{ payload: data }, null];\n    case \"node2\":\n        return [null, { payload: data }];\n    default:\n        return null;\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 40,
        "wires": [
            [
                "7f0531a96dd89f42"
            ],
            [
                "7ef9f0788320fc15"
            ]
        ]
    },
    {
        "id": "a3754564e7c963cd",
        "type": "function",
        "z": "30a0866f4520c757",
        "name": "function 4",
        "func": "let data = msg.payload;\n\nif (!data || !data.nodeId) return null;\n\nlet ret = {\n    payload: {\n        temperature: parseFloat(data.temperature).toFixed(2),\n        node: parseFloat(data.nodeId),\n        humidity: parseFloat(data.humidity).toFixed(2),\n        battery: parseFloat(data.batteryVoltage).toFixed(2)\n    },\n    tags: {\n        nodeId: data.nodeId\n    },\n    measurement: \"history\",   // thêm measurement nếu cần\n    database: \"UIT_LORA\",   // thêm measurement nếu cần\n};\n\nreturn ret;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 140,
        "wires": [
            [
                "43092cc488728e5b",
                "b4585ec1c7e9031d"
            ]
        ]
    },
    {
        "id": "43092cc488728e5b",
        "type": "debug",
        "z": "30a0866f4520c757",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 100,
        "wires": []
    },
    {
        "id": "b4585ec1c7e9031d",
        "type": "influxdb out",
        "z": "30a0866f4520c757",
        "influxdb": "influxdb_config",
        "name": "Save to influx",
        "measurement": "history",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1060,
        "y": 200,
        "wires": []
    },
    {
        "id": "890a8f5a47e3b9e3",
        "type": "debug",
        "z": "30a0866f4520c757",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 560,
        "wires": []
    },
    {
        "id": "b998ca03f349aed8",
        "type": "ui_spacer",
        "z": "30a0866f4520c757",
        "name": "spacer",
        "group": "3481361afa687a93",
        "order": 2,
        "width": 16,
        "height": 1
    },
    {
        "id": "0b80eb8993320eba",
        "type": "ui_spacer",
        "z": "30a0866f4520c757",
        "name": "spacer",
        "group": "3481361afa687a93",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "ad2deba8c4f6d61b",
        "type": "ui_spacer",
        "z": "30a0866f4520c757",
        "name": "spacer",
        "group": "3481361afa687a93",
        "order": 9,
        "width": 24,
        "height": 1
    },
    {
        "id": "106c10e0a0244441",
        "type": "ui_spacer",
        "z": "30a0866f4520c757",
        "name": "spacer",
        "group": "2e7e904a8083e0ad",
        "order": 2,
        "width": 9,
        "height": 1
    },
    {
        "id": "fe801dae00be3b02",
        "type": "ui_spacer",
        "z": "30a0866f4520c757",
        "name": "spacer",
        "group": "2e7e904a8083e0ad",
        "order": 9,
        "width": 14,
        "height": 1
    },
    {
        "id": "9d650d637dbcd9af",
        "type": "ui_spacer",
        "z": "30a0866f4520c757",
        "name": "spacer",
        "group": "2e7e904a8083e0ad",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "dev.combros.tech",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "influxdb_config",
        "type": "influxdb",
        "hostname": "dev.combros.tech",
        "port": "8086",
        "database": "UIT_LORA",
        "name": "InfluxDB Config",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "2e7e904a8083e0ad",
        "type": "ui_group",
        "name": "History",
        "tab": "58e275bb6b9e28eb",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3481361afa687a93",
        "type": "ui_group",
        "name": "Main",
        "tab": "58e275bb6b9e28eb",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "58e275bb6b9e28eb",
        "type": "ui_tab",
        "name": "LoRa Sensor",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]